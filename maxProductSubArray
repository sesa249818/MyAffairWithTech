func maxProduct(nums []int) int {
    /*find product of all subarray and compare it
        return maxProduct.
        timeComplexity=O(n^2)
        spaceComplexity=O(1)
    */
    
    // Better solution using kadane algo
    n:=len(nums)
    if n == 0{
        return 0
    }
    
    mp:=nums[0]
    lp:=nums[0]
    result :=nums[0]
    
    for i:=1;i< n;i++{
        mp,lp = max(nums[i],max(nums[i]*mp,nums[i]*lp)),min(nums[i],min(nums[i]*mp,nums[i]*lp) )

        if mp > result{
            result = mp
        }
    }

    return result
}
func max(a,b int)int{
    if a > b{
        return a
    }else{
        return b
    }
}
func min(a,b int)int{
    if a< b{
        return a
    }else{
        return b
    }
}
